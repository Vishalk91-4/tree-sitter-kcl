================================================================================
Schema Statement
================================================================================

schema Person:
    firstName: str = "John"

--------------------------------------------------------------------------------

(module
    (schema_statement
    (identifier)
    (block
        (assignment
        (dotted_name
            (identifier))
        (type
            (basic_type))
        (string
            (string_start)
            (string_content)
            (string_end))))))

================================================================================
Protocol Statement
================================================================================

protocol DataProtocol:
    data: str

--------------------------------------------------------------------------------

(module
      (protocol_statement
        (identifier)
        (block
          (assignment
            (dotted_name
              (identifier))
            (basic_type)))))

================================================================================
Rule Statement
================================================================================

rule SomeRule:
    age > 0, "rule check failure message"

--------------------------------------------------------------------------------

(module
  (rule_statement
    (identifier)
    (block
      (if_statement
        (comparison_operator
          (attribute
            (identifier))
          (integer))
        (string
          (string_start)
          (string_content)
          (string_end))))))

================================================================================
Schema Statement with Check
================================================================================

schema Config:
    volumes: [{str:}]
    services: [{str:}]
    check:
        all service in services {
            service.clusterIP == "NONE" 
        }, "invalid cluster ip"

        any volume in volumes {
            volume.mountPath in ["/home/admin", "/home/myapp"]
        }

--------------------------------------------------------------------------------
(module
      (schema_statement
        (identifier)
        (block
          (assignment
            (dotted_name
              (identifier))
            (list_type
              (type
                (dict_type
                  (type
                    (basic_type))))))
          (assignment
            (dotted_name
              (identifier))
            (list_type
              (type
                (dict_type
                  (type
                    (basic_type))))))
          (check_statement
            (quant_expr
              (quant_op)
              (identifier)
              (quant_target
                (identifier))
              (comparison_operator
                (selector_expression
                  (attribute
                    (identifier))
                  (select_suffix
                    (identifier)))
                (string
                  (string_start)
                  (string_content)
                  (string_end))))
            (string
              (string_start)
              (string_content)
              (string_end)))
          (quant_expr
            (quant_op)
            (identifier)
            (quant_target
              (identifier))
            (comparison_operator
              (selector_expression
                (attribute
                  (identifier))
                (select_suffix
                  (identifier)))
              (list
                (string
                  (string_start)
                  (string_content)
                  (string_end))
                (string
                  (string_start)
                  (string_content)
                  (string_end))))))))

================================================================================
Decorated of a Schema
================================================================================

@deprecated
schema ObsoleteSchema:
    attr: str

--------------------------------------------------------------------------------

(module
  (decorated_definition
    (decorator
      (attribute
        (identifier)))
    (schema_statement
      (identifier)
      (block
        (assignment
          (dotted_name
            (identifier))
          (basic_type))))))

================================================================================
Schema Kwargs
================================================================================

personA = Person() {}

--------------------------------------------------------------------------------

(module
  (assignment
    (dotted_name
      (identifier))
    (schema_instantiation
      (call
        (attribute
          (identifier))
        (argument_list))
      (dictionary))))

================================================================================
Unification Statement
================================================================================

personInstance : Person {name: "Alice"}

--------------------------------------------------------------------------------

(module
  (unification
    (dotted_name
      (identifier))
    (schema_expr
      (identifier)
      (dict_expr
        (pair
          (attribute
            (identifier))
          (string
            (string_start)
            (string_content)
            (string_end)))))))

================================================================================
Schema Index Signature
================================================================================

schema Map:
    """
    Map is a schema with a key of str type and a value of str type
    """
    [str]: str  # `{attr_alias}` can be omitted.

--------------------------------------------------------------------------------

(module
  (schema_statement
    (identifier)
    (block
      (string
        (string_start)
        (string_content)
        (string_end))
      (schema_index_signature
        (basic_type)
        (type
          (basic_type))
        (comment)))))

================================================================================
Schema Index Signature with Check Block
================================================================================

schema Data:
    [data: str]: str
    check:
        data in ["Alice", "Bob"]

data = Data {
    Alice = "10"
    Bob = "12"
}

--------------------------------------------------------------------------------

(module
  (schema_statement
    (identifier)
    (block
      (schema_index_signature
        (identifier)
        (basic_type)
        (type
          (basic_type)))
      (check_statement
        (comparison_operator
          (attribute
            (identifier))
          (list
            (string
              (string_start)
              (string_content)
              (string_end))
            (string
              (string_start)
              (string_content)
              (string_end)))))))
  (assignment
    (dotted_name
      (identifier))
    (schema_expr
      (identifier)
      (dict_expr
        (pair
          (attribute
            (identifier))
          (string
            (string_start)
            (string_content)
            (string_end)))
        (pair
          (attribute
            (identifier))
          (string
            (string_start)
            (string_content)
            (string_end)))))))